{"version":3,"file":"bundle.esm.js","sources":["../src/types.ts","../src/hints.ts","../src/diceFaces.ts","../src/dice.ts","../src/pools.ts"],"sourcesContent":["export type DicePool = {\n  boostDice?: number;\n  abilityDice?: number;\n  proficiencyDice?: number;\n  setBackDice?: number;\n  difficultyDice?: number;\n  challengeDice?: number;\n  forceDice?: number;\n  // Automatic symbols added to the result (from talents, attachments, etc.)\n  automaticSuccesses?: number;\n  automaticFailures?: number;\n  automaticAdvantages?: number;\n  automaticThreats?: number;\n  automaticTriumphs?: number;\n  automaticDespairs?: number;\n  automaticLightSide?: number;\n  automaticDarkSide?: number;\n  // Dice upgrades and downgrades\n  upgradeAbility?: number; // Upgrades ability (green) to proficiency (yellow)\n  upgradeDifficulty?: number; // Upgrades difficulty (purple) to challenge (red)\n  downgradeProficiency?: number; // Downgrades proficiency (yellow) to ability (green)\n  downgradeChallenge?: number; // Downgrades challenge (red) to difficulty (purple)\n};\n\nexport type DiceResult = {\n  successes: number;\n  failures: number;\n  advantages: number;\n  threats: number;\n  triumphs: number;\n  despair: number;\n  lightSide: number;\n  darkSide: number;\n  hints?: string[];\n};\n\nexport type DieType =\n  | \"boost\"\n  | \"ability\"\n  | \"proficiency\"\n  | \"setback\"\n  | \"difficulty\"\n  | \"challenge\"\n  | \"force\";\n\nexport type DetailedDieResult = {\n  type: DieType;\n  roll: number;\n  result: DiceResult;\n};\n\nexport type RollResult = {\n  results: DetailedDieResult[];\n  summary: DiceResult;\n};\n\nexport const SYMBOLS = {\n  SUCCESS: \"SUCCESS\" as const,\n  FAILURE: \"FAILURE\" as const,\n  ADVANTAGE: \"ADVANTAGE\" as const,\n  THREAT: \"THREAT\" as const,\n  TRIUMPH: \"TRIUMPH\" as const,\n  DESPAIR: \"DESPAIR\" as const,\n  LIGHT: \"LIGHT\" as const,\n  DARK: \"DARK\" as const,\n} as const;\n\nexport type Symbol = keyof typeof SYMBOLS;\n\nexport type DieFaceSymbols = {\n  successes?: number;\n  failures?: number;\n  advantages?: number;\n  threats?: number;\n  triumphs?: number;\n  despairs?: number;\n  lightSide?: number;\n  darkSide?: number;\n};\n\nexport type BoostDieFace = 1 | 2 | 3 | 4 | 5 | 6;\nexport type SetbackDieFace = 1 | 2 | 3 | 4 | 5 | 6;\nexport type AbilityDieFace = 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8;\nexport type DifficultyDieFace = 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8;\nexport type ProficiencyDieFace =\n  | 1\n  | 2\n  | 3\n  | 4\n  | 5\n  | 6\n  | 7\n  | 8\n  | 9\n  | 10\n  | 11\n  | 12;\nexport type ChallengeDieFace = 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12;\nexport type ForceDieFace = 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12;\n\nexport type RollOptions = {\n  hints?: boolean;\n  /**\n   * Maximum number of dice allowed per die type.\n   * Default: 100\n   */\n  maxDicePerType?: number;\n  /**\n   * Maximum total number of dice allowed in a single roll.\n   * Default: 500\n   */\n  maxTotalDice?: number;\n  /**\n   * Whether to throw an error when dice limits are exceeded.\n   * If false, dice counts will be silently capped to the maximum.\n   * Default: false\n   */\n  throwOnLimitExceeded?: boolean;\n};\n","import { SYMBOLS, type Symbol } from \"./types\";\n\n// 1 advantage or 1 triumph\nconst recoverOneStrain = \"Recover one strain (may be applied more than once).\";\nconst addBoostDieToActiveAlly =\n  \"Add a boost die to the next allied active character's check.\";\nconst noticeImportantPoint =\n  \"Notice a single important point in the ongoing conflict, such as the location of a blast door's control panel or a weak point on an attack speeder.\";\nconst inflictCriticalInjury =\n  \"Inflict a Critical Injury with a successful attack that deals damage past soak (Advantage cost may vary).\";\nconst activateWeaponQuality =\n  \"Activate a weapon quality (Advantage cost may vary).\";\n\n// 2 advantage or 1 triumph\nconst performManeuver =\n  \"Perform an immediate free maneuver that does not exceed the two maneuver per turn limit.\";\nconst addSetbackDie =\n  \"Add a setback die to the targeted character's next check.\";\nconst addBoostDieToAnyAlly =\n  \"Add a boost die to any allied character's next check, including that of the active character.\";\n\n// 3 advantage or 1 triumph\nconst negateEnemy =\n  \"Negate the targeted enemy's defensive bonuses (such as the defense gained from cover, equipment, or performing the Guarded Stance maneuver) util the end of the current round.\";\nconst ignoreEnvironment =\n  \"Ignore penalizing environmental effects such as inclement weather, zero gravity, or similar circumstances until the end of the active character's next turn.\";\nconst disableOpponent =\n  \"When dealing damage to a target, have the attack disable the opponent or one piece of gear rather than dealing wounds or strain. This could include hobbling them temporarily with a shot to the leg, or disabling their comlink. This should be agreed upon by the player and the GM, and the effects are up to the GM (although Table 6-10: Critical Injury Result is a god resource to consult for possible effects). The effects should be temporary and not too excessive.\";\nconst gainDefense =\n  \"Gain + 1 melee or ranged defense until the end of the active character's next turn.\";\nconst dropWeapon =\n  \"Force the target to drop a melee or ranged weapon they are wielding.\";\n\n// 1 triumph\nconst upgradeDifficultyTargetedCharacter =\n  \"Upgrade the difficulty of the targeted character's next check.\";\nconst doSomethingVital =\n  \"Do something vital, such as shooting the controls to the nearby blast doors to seal them shut.\";\nconst upgradeAnyAllyCheck =\n  \"Upgrade any allied character's next check, including that of the current active character.\";\n\n// 2 triumph\nconst destroyEquipment =\n  \"When dealing damage to a target, have the attack destroy a piece of equipment the target is using, such as blowing up his blaster or destroying a personal shield generator.\";\n\n// 1 threat or 1 despair\nconst sufferStrain = \"The active character suffers 1 strain.\";\nconst loseManeuverBenefit =\n  \"The active character loses the benefits of a prior maneuver (such as from taking cover or assuming a Guarded Stance) until they perform the maneuver again.\";\n\n// 2 threat or 1 despair\nconst freeManeuver =\n  \"An opponent may immediately perform one free maneuver in response to the active character's check.\";\nconst addBoostDieToTargetedCharacter =\n  \"Add a boost die to the targeted character's next check.\";\nconst sufferSetback =\n  \"The active character or an allied character suffers a setback die on their next action.\";\n\n// 3 threat or 1 despair\nconst fallProne = \"The active character falls prone.\";\nconst gainSignificantAdvantage =\n  \"The active character grants the enemy a significant advantage in the ongoing encounter, such as accidentally blasting the controls to a bridge the active character was planning to use for their escape.\";\n\n// 1 despair\nconst outOfAmmo =\n  \"The character's ranged weapon imediately runs out of ammunition and may not be used for the remainder of the encounter.\";\nconst upgradeDifficultyAlliedCharacter =\n  \"Upgrade the difficulty of an allied character's next check, including that of the current active character.\";\nconst damagedItem =\n  \"The tool or melee weapon the character is using becomes damaged.\";\n\nexport type CostType = {\n  [key in Symbol]?: number;\n};\n\ntype Hint = {\n  description: string;\n  cost: CostType;\n};\n\nexport const hints: Hint[] = [\n  // 1 advantage or 1 triumph\n  {\n    description: recoverOneStrain,\n    cost: {\n      [SYMBOLS.ADVANTAGE]: 1,\n      [SYMBOLS.TRIUMPH]: 1,\n    },\n  },\n  {\n    description: addBoostDieToActiveAlly,\n    cost: {\n      [SYMBOLS.ADVANTAGE]: 1,\n      [SYMBOLS.TRIUMPH]: 1,\n    },\n  },\n  {\n    description: noticeImportantPoint,\n    cost: {\n      [SYMBOLS.ADVANTAGE]: 1,\n      [SYMBOLS.TRIUMPH]: 1,\n    },\n  },\n  {\n    description: inflictCriticalInjury,\n    cost: {\n      [SYMBOLS.ADVANTAGE]: 1,\n      [SYMBOLS.TRIUMPH]: 1,\n    },\n  },\n  {\n    description: activateWeaponQuality,\n    cost: {\n      [SYMBOLS.ADVANTAGE]: 1,\n      [SYMBOLS.TRIUMPH]: 1,\n    },\n  },\n  // 2 advantage or 1 triumph\n  {\n    description: performManeuver,\n    cost: {\n      [SYMBOLS.ADVANTAGE]: 2,\n      [SYMBOLS.TRIUMPH]: 1,\n    },\n  },\n  {\n    description: addSetbackDie,\n    cost: {\n      [SYMBOLS.ADVANTAGE]: 2,\n      [SYMBOLS.TRIUMPH]: 1,\n    },\n  },\n  {\n    description: addBoostDieToAnyAlly,\n    cost: {\n      [SYMBOLS.ADVANTAGE]: 2,\n      [SYMBOLS.TRIUMPH]: 1,\n    },\n  },\n  // 3 advantage or 1 triumph\n  {\n    description: negateEnemy,\n    cost: {\n      [SYMBOLS.ADVANTAGE]: 3,\n      [SYMBOLS.TRIUMPH]: 1,\n    },\n  },\n  {\n    description: ignoreEnvironment,\n    cost: {\n      [SYMBOLS.ADVANTAGE]: 3,\n      [SYMBOLS.TRIUMPH]: 1,\n    },\n  },\n  {\n    description: disableOpponent,\n    cost: {\n      [SYMBOLS.ADVANTAGE]: 3,\n      [SYMBOLS.TRIUMPH]: 1,\n    },\n  },\n  {\n    description: gainDefense,\n    cost: {\n      [SYMBOLS.ADVANTAGE]: 3,\n      [SYMBOLS.TRIUMPH]: 1,\n    },\n  },\n  {\n    description: dropWeapon,\n    cost: {\n      [SYMBOLS.ADVANTAGE]: 3,\n      [SYMBOLS.TRIUMPH]: 1,\n    },\n  },\n  // 1 triumph\n  {\n    description: upgradeDifficultyTargetedCharacter,\n    cost: {\n      [SYMBOLS.TRIUMPH]: 1,\n    },\n  },\n  {\n    description: doSomethingVital,\n    cost: {\n      [SYMBOLS.TRIUMPH]: 1,\n    },\n  },\n  {\n    description: upgradeAnyAllyCheck,\n    cost: {\n      [SYMBOLS.TRIUMPH]: 1,\n    },\n  },\n  // 2 triumph\n  {\n    description: destroyEquipment,\n    cost: {\n      [SYMBOLS.TRIUMPH]: 2,\n    },\n  },\n  // 1 threat or 1 despair\n  {\n    description: sufferStrain,\n    cost: {\n      [SYMBOLS.THREAT]: 1,\n      [SYMBOLS.DESPAIR]: 1,\n    },\n  },\n  {\n    description: loseManeuverBenefit,\n    cost: {\n      [SYMBOLS.THREAT]: 1,\n      [SYMBOLS.DESPAIR]: 1,\n    },\n  },\n  // 2 threat or 1 despair\n  {\n    description: freeManeuver,\n    cost: {\n      [SYMBOLS.THREAT]: 2,\n      [SYMBOLS.DESPAIR]: 1,\n    },\n  },\n  {\n    description: addBoostDieToTargetedCharacter,\n    cost: {\n      [SYMBOLS.THREAT]: 1,\n      [SYMBOLS.DESPAIR]: 1,\n    },\n  },\n  {\n    description: sufferSetback,\n    cost: {\n      [SYMBOLS.THREAT]: 2,\n      [SYMBOLS.DESPAIR]: 1,\n    },\n  },\n  // 3 threat or 1 despair\n  {\n    description: fallProne,\n    cost: {\n      [SYMBOLS.THREAT]: 3,\n      [SYMBOLS.DESPAIR]: 1,\n    },\n  },\n  {\n    description: gainSignificantAdvantage,\n    cost: {\n      [SYMBOLS.THREAT]: 3,\n      [SYMBOLS.DESPAIR]: 1,\n    },\n  },\n  // 1 despair\n  {\n    description: outOfAmmo,\n    cost: {\n      [SYMBOLS.DESPAIR]: 1,\n    },\n  },\n  {\n    description: upgradeDifficultyAlliedCharacter,\n    cost: {\n      [SYMBOLS.DESPAIR]: 1,\n    },\n  },\n  {\n    description: damagedItem,\n    cost: {\n      [SYMBOLS.DESPAIR]: 1,\n    },\n  },\n];\n\nexport function hintCostDisplayText(hint: Hint): string {\n  if (!hint.cost || Object.keys(hint.cost).length === 0) {\n    return \"No cost\";\n  }\n  const parts = Object.entries(hint.cost)\n    .filter(([_, count]) => count && count > 0)\n    .map(([symbol, count]) => {\n      const symbolName =\n        symbol.charAt(0).toUpperCase() + symbol.toLowerCase().slice(1);\n      const plural = count > 1 ? \"s\" : \"\";\n      return `${count} ${symbolName}${plural}`;\n    });\n\n  // Use \"OR\" in uppercase for clarity when multiple options exist\n  if (parts.length > 1) {\n    return parts.join(\" OR \");\n  }\n  return parts.length > 0 ? parts[0] : \"No cost\";\n}\n","import { DieFaceSymbols } from \"./types\";\n\nexport const BOOST_DIE_FACES: Record<number, DieFaceSymbols> = {\n  1: {}, // Blank\n  2: {}, // Blank\n  3: { successes: 1 }, // (S)\n  4: { successes: 1, advantages: 1 }, // (S)(A)\n  5: { successes: 1, advantages: 1 }, // (S)(A)\n  6: { advantages: 1 }, // (A)\n};\n\nexport const SETBACK_DIE_FACES: Record<number, DieFaceSymbols> = {\n  1: {}, // Blank\n  2: {}, // Blank\n  3: { failures: 1 }, // (F)\n  4: { failures: 1 }, // (F)\n  5: { threats: 1 }, // (TH)\n  6: { threats: 1 }, // (TH)\n};\n\nexport const ABILITY_DIE_FACES: Record<number, DieFaceSymbols> = {\n  1: {}, // Blank\n  2: { successes: 1 }, // (S)\n  3: { successes: 1 }, // (S)\n  4: { successes: 2 }, // (S)(S)\n  5: { advantages: 1 }, // (A)\n  6: { advantages: 1 }, // (A)\n  7: { successes: 1, advantages: 1 }, // (S)(A)\n  8: { advantages: 2 }, // (A)(A)\n};\n\nexport const DIFFICULTY_DIE_FACES: Record<number, DieFaceSymbols> = {\n  1: {}, // Blank\n  2: { failures: 1 }, // (F)\n  3: { failures: 2 }, // (F)(F)\n  4: { threats: 1 }, // (TH)\n  5: { threats: 1 }, // (TH)\n  6: { threats: 1 }, // (TH)\n  7: { threats: 2 }, // (TH)(TH)\n  8: { failures: 1, threats: 1 }, // (F)(TH)\n};\n\nexport const PROFICIENCY_DIE_FACES: Record<number, DieFaceSymbols> = {\n  1: {}, // Blank\n  2: { successes: 1 }, // (S)\n  3: { successes: 1 }, // (S)\n  4: { successes: 2 }, // (S)(S)\n  5: { successes: 2 }, // (S)(S)\n  6: { advantages: 1 }, // (A)\n  7: { successes: 1, advantages: 1 }, // (S)(A)\n  8: { successes: 1, advantages: 1 }, // (S)(A)\n  9: { successes: 1, advantages: 1 }, // (S)(A)\n  10: { advantages: 2 }, // (A)(A)\n  11: { advantages: 2 }, // (A)(A)\n  12: { triumphs: 1, successes: 1 }, // (TR) - Triumph also counts as Success\n};\n\nexport const CHALLENGE_DIE_FACES: Record<number, DieFaceSymbols> = {\n  1: {}, // Blank\n  2: { failures: 1 }, // (F)\n  3: { failures: 1 }, // (F)\n  4: { failures: 2 }, // (F)(F)\n  5: { failures: 2 }, // (F)(F)\n  6: { threats: 1 }, // (TH)\n  7: { threats: 1 }, // (TH)\n  8: { failures: 1, threats: 1 }, // (F)(TH)\n  9: { failures: 1, threats: 1 }, // (F)(TH)\n  10: { threats: 2 }, // (TH)(TH)\n  11: { threats: 2 }, // (TH)(TH)\n  12: { despairs: 1, failures: 1 }, // (D) - Despair also counts as Failure\n};\n\nexport const FORCE_DIE_FACES: Record<number, DieFaceSymbols> = {\n  1: { darkSide: 1 }, // (DS)\n  2: { darkSide: 1 }, // (DS)\n  3: { darkSide: 1 }, // (DS)\n  4: { darkSide: 1 }, // (DS)\n  5: { darkSide: 1 }, // (DS)\n  6: { darkSide: 1 }, // (DS)\n  7: { darkSide: 2 }, // (DS)(DS)\n  8: { lightSide: 1 }, // (LS)\n  9: { lightSide: 1 }, // (LS)\n  10: { lightSide: 2 }, // (LS)(LS)\n  11: { lightSide: 2 }, // (LS)(LS)\n  12: { lightSide: 2 }, // (LS)(LS)\n};\n\nexport const DICE_FACES = {\n  boost: BOOST_DIE_FACES,\n  setback: SETBACK_DIE_FACES,\n  ability: ABILITY_DIE_FACES,\n  difficulty: DIFFICULTY_DIE_FACES,\n  proficiency: PROFICIENCY_DIE_FACES,\n  challenge: CHALLENGE_DIE_FACES,\n  force: FORCE_DIE_FACES,\n} as const;\n","import { hintCostDisplayText, hints } from \"./hints\";\nimport {\n  DicePool,\n  RollResult,\n  DiceResult,\n  DetailedDieResult,\n  RollOptions,\n} from \"./types\";\nimport {\n  BOOST_DIE_FACES,\n  SETBACK_DIE_FACES,\n  ABILITY_DIE_FACES,\n  DIFFICULTY_DIE_FACES,\n  PROFICIENCY_DIE_FACES,\n  CHALLENGE_DIE_FACES,\n  FORCE_DIE_FACES,\n} from \"./diceFaces\";\n\n// Default dice limits for performance and security\nexport const DEFAULT_MAX_DICE_PER_TYPE = 100;\nexport const DEFAULT_MAX_TOTAL_DICE = 500;\n\nconst rollDie = (sides: number): number =>\n  Math.floor(Math.random() * sides) + 1;\n\nconst boostDieResult = (roll: number): DiceResult => {\n  const face = BOOST_DIE_FACES[roll];\n  return {\n    successes: face.successes || 0,\n    failures: face.failures || 0,\n    advantages: face.advantages || 0,\n    threats: face.threats || 0,\n    triumphs: face.triumphs || 0,\n    despair: face.despairs || 0,\n    lightSide: face.lightSide || 0,\n    darkSide: face.darkSide || 0,\n  };\n};\n\nconst setBackDieResult = (roll: number): DiceResult => {\n  const face = SETBACK_DIE_FACES[roll];\n  return {\n    successes: face.successes || 0,\n    failures: face.failures || 0,\n    advantages: face.advantages || 0,\n    threats: face.threats || 0,\n    triumphs: face.triumphs || 0,\n    despair: face.despairs || 0,\n    lightSide: face.lightSide || 0,\n    darkSide: face.darkSide || 0,\n  };\n};\n\nconst abilityDieResult = (roll: number): DiceResult => {\n  const face = ABILITY_DIE_FACES[roll];\n  return {\n    successes: face.successes || 0,\n    failures: face.failures || 0,\n    advantages: face.advantages || 0,\n    threats: face.threats || 0,\n    triumphs: face.triumphs || 0,\n    despair: face.despairs || 0,\n    lightSide: face.lightSide || 0,\n    darkSide: face.darkSide || 0,\n  };\n};\n\nconst difficultyDieResult = (roll: number): DiceResult => {\n  const face = DIFFICULTY_DIE_FACES[roll];\n  return {\n    successes: face.successes || 0,\n    failures: face.failures || 0,\n    advantages: face.advantages || 0,\n    threats: face.threats || 0,\n    triumphs: face.triumphs || 0,\n    despair: face.despairs || 0,\n    lightSide: face.lightSide || 0,\n    darkSide: face.darkSide || 0,\n  };\n};\n\nconst proficiencyDieResult = (roll: number): DiceResult => {\n  const face = PROFICIENCY_DIE_FACES[roll];\n  return {\n    successes: face.successes || 0,\n    failures: face.failures || 0,\n    advantages: face.advantages || 0,\n    threats: face.threats || 0,\n    triumphs: face.triumphs || 0,\n    despair: face.despairs || 0,\n    lightSide: face.lightSide || 0,\n    darkSide: face.darkSide || 0,\n  };\n};\n\nconst challengeDieResult = (roll: number): DiceResult => {\n  const face = CHALLENGE_DIE_FACES[roll];\n  return {\n    successes: face.successes || 0,\n    failures: face.failures || 0,\n    advantages: face.advantages || 0,\n    threats: face.threats || 0,\n    triumphs: face.triumphs || 0,\n    despair: face.despairs || 0,\n    lightSide: face.lightSide || 0,\n    darkSide: face.darkSide || 0,\n  };\n};\n\nconst forceDieResult = (roll: number): DiceResult => {\n  const face = FORCE_DIE_FACES[roll];\n  return {\n    successes: face.successes || 0,\n    failures: face.failures || 0,\n    advantages: face.advantages || 0,\n    threats: face.threats || 0,\n    triumphs: face.triumphs || 0,\n    despair: face.despairs || 0,\n    lightSide: face.lightSide || 0,\n    darkSide: face.darkSide || 0,\n  };\n};\n\n/**\n * Applies dice upgrades and downgrades to a pool.\n * Upgrades are applied first, then downgrades.\n *\n * @param pool - The dice pool to modify\n * @returns A new dice pool with upgrades/downgrades applied\n */\nconst applyDiceModifications = (pool: DicePool): DicePool => {\n  const modifiedPool = { ...pool };\n\n  // Apply upgrades first (per game rules)\n  if (pool.upgradeAbility && pool.upgradeAbility > 0) {\n    let upgradesToApply = pool.upgradeAbility;\n    const currentAbility = modifiedPool.abilityDice || 0;\n\n    // Upgrade existing ability dice to proficiency\n    const upgradedDice = Math.min(currentAbility, upgradesToApply);\n    modifiedPool.abilityDice = currentAbility - upgradedDice;\n    modifiedPool.proficiencyDice =\n      (modifiedPool.proficiencyDice || 0) + upgradedDice;\n    upgradesToApply -= upgradedDice;\n\n    // Add remaining upgrades as new proficiency dice\n    if (upgradesToApply > 0) {\n      modifiedPool.proficiencyDice =\n        (modifiedPool.proficiencyDice || 0) + upgradesToApply;\n    }\n  }\n\n  if (pool.upgradeDifficulty && pool.upgradeDifficulty > 0) {\n    let upgradesToApply = pool.upgradeDifficulty;\n    const currentDifficulty = modifiedPool.difficultyDice || 0;\n\n    // Upgrade existing difficulty dice to challenge\n    const upgradedDice = Math.min(currentDifficulty, upgradesToApply);\n    modifiedPool.difficultyDice = currentDifficulty - upgradedDice;\n    modifiedPool.challengeDice =\n      (modifiedPool.challengeDice || 0) + upgradedDice;\n    upgradesToApply -= upgradedDice;\n\n    // Add remaining upgrades as new challenge dice\n    if (upgradesToApply > 0) {\n      modifiedPool.challengeDice =\n        (modifiedPool.challengeDice || 0) + upgradesToApply;\n    }\n  }\n\n  // Apply downgrades after upgrades\n  if (pool.downgradeProficiency && pool.downgradeProficiency > 0) {\n    const currentProficiency = modifiedPool.proficiencyDice || 0;\n    const downgradesToApply = Math.min(\n      currentProficiency,\n      pool.downgradeProficiency,\n    );\n\n    // Downgrade proficiency dice to ability dice\n    modifiedPool.proficiencyDice = currentProficiency - downgradesToApply;\n    modifiedPool.abilityDice =\n      (modifiedPool.abilityDice || 0) + downgradesToApply;\n    // Excess downgrades are ignored (per requirements)\n  }\n\n  if (pool.downgradeChallenge && pool.downgradeChallenge > 0) {\n    const currentChallenge = modifiedPool.challengeDice || 0;\n    const downgradesToApply = Math.min(\n      currentChallenge,\n      pool.downgradeChallenge,\n    );\n\n    // Downgrade challenge dice to difficulty dice\n    modifiedPool.challengeDice = currentChallenge - downgradesToApply;\n    modifiedPool.difficultyDice =\n      (modifiedPool.difficultyDice || 0) + downgradesToApply;\n    // Excess downgrades are ignored (per requirements)\n  }\n\n  return modifiedPool;\n};\n\nconst sumResults = (\n  results: DiceResult[],\n  automaticSymbols?: {\n    successes?: number;\n    failures?: number;\n    advantages?: number;\n    threats?: number;\n    triumphs?: number;\n    despairs?: number;\n    lightSide?: number;\n    darkSide?: number;\n  },\n  options?: RollOptions,\n): DiceResult => {\n  const sums = results.reduce(\n    (acc, curr) => ({\n      successes: acc.successes + curr.successes,\n      failures: acc.failures + curr.failures,\n      advantages: acc.advantages + curr.advantages,\n      threats: acc.threats + curr.threats,\n      triumphs: acc.triumphs + curr.triumphs,\n      despair: acc.despair + curr.despair,\n      lightSide: acc.lightSide + (curr.lightSide || 0),\n      darkSide: acc.darkSide + (curr.darkSide || 0),\n    }),\n    {\n      successes:\n        (automaticSymbols?.successes || 0) + (automaticSymbols?.triumphs || 0),\n      failures:\n        (automaticSymbols?.failures || 0) + (automaticSymbols?.despairs || 0),\n      advantages: automaticSymbols?.advantages || 0,\n      threats: automaticSymbols?.threats || 0,\n      triumphs: automaticSymbols?.triumphs || 0,\n      despair: automaticSymbols?.despairs || 0,\n      lightSide: automaticSymbols?.lightSide || 0,\n      darkSide: automaticSymbols?.darkSide || 0,\n    },\n  );\n\n  let netSuccesses = 0;\n  let netFailures = 0;\n\n  if (sums.successes === sums.failures) {\n    netSuccesses = 0;\n    netFailures = 0;\n  } else if (sums.successes > sums.failures) {\n    netSuccesses = sums.successes - sums.failures;\n  } else {\n    netFailures = sums.failures - sums.successes;\n  }\n\n  // Advantages and threats cancel each other out\n  let netAdvantages = 0;\n  let netThreats = 0;\n\n  if (sums.advantages === sums.threats) {\n    netAdvantages = 0;\n    netThreats = 0;\n  } else if (sums.advantages > sums.threats) {\n    netAdvantages = sums.advantages - sums.threats;\n  } else {\n    netThreats = sums.threats - sums.advantages;\n  }\n\n  const result: DiceResult = {\n    successes: netSuccesses,\n    failures: netFailures,\n    advantages: netAdvantages,\n    threats: netThreats,\n    triumphs: sums.triumphs,\n    despair: sums.despair,\n    lightSide: sums.lightSide,\n    darkSide: sums.darkSide,\n  };\n\n  return result;\n};\n\n/**\n * Rolls a dice pool and returns the results.\n *\n * @param pool - The dice pool to roll\n * @param options - Optional roll configuration including dice limits\n * @returns The roll results with detailed die information and summary\n * @throws {Error} If dice counts exceed configured limits\n *\n * Default limits:\n * - Max dice per type: 100 (configurable via options.maxDicePerType)\n * - Max total dice: 500 (configurable via options.maxTotalDice)\n */\nexport const roll = (pool: DicePool, options?: RollOptions): RollResult => {\n  // Apply dice modifications (upgrades/downgrades)\n  const modifiedPool = applyDiceModifications(pool);\n\n  const boostCount = modifiedPool.boostDice ?? 0;\n  const abilityCount = modifiedPool.abilityDice ?? 0;\n  const proficiencyCount = modifiedPool.proficiencyDice ?? 0;\n  const setBackCount = modifiedPool.setBackDice ?? 0;\n  const difficultyCount = modifiedPool.difficultyDice ?? 0;\n  const challengeCount = modifiedPool.challengeDice ?? 0;\n  const forceCount = modifiedPool.forceDice ?? 0;\n\n  // Get limits from options or use defaults\n  const maxDicePerType = options?.maxDicePerType ?? DEFAULT_MAX_DICE_PER_TYPE;\n  const maxTotalDice = options?.maxTotalDice ?? DEFAULT_MAX_TOTAL_DICE;\n\n  // Ensure all dice counts are non-negative and apply per-type limits\n  const sanitizedPool = {\n    boostDice: Math.max(0, Math.min(boostCount, maxDicePerType)),\n    abilityDice: Math.max(0, Math.min(abilityCount, maxDicePerType)),\n    proficiencyDice: Math.max(0, Math.min(proficiencyCount, maxDicePerType)),\n    setBackDice: Math.max(0, Math.min(setBackCount, maxDicePerType)),\n    difficultyDice: Math.max(0, Math.min(difficultyCount, maxDicePerType)),\n    challengeDice: Math.max(0, Math.min(challengeCount, maxDicePerType)),\n    forceDice: Math.max(0, Math.min(forceCount, maxDicePerType)),\n  };\n\n  // Check if any dice counts exceeded the per-type limit\n  const exceedsPerTypeLimit =\n    boostCount > maxDicePerType ||\n    abilityCount > maxDicePerType ||\n    proficiencyCount > maxDicePerType ||\n    setBackCount > maxDicePerType ||\n    difficultyCount > maxDicePerType ||\n    challengeCount > maxDicePerType ||\n    forceCount > maxDicePerType;\n\n  // Calculate total dice count\n  const totalDice =\n    sanitizedPool.boostDice +\n    sanitizedPool.abilityDice +\n    sanitizedPool.proficiencyDice +\n    sanitizedPool.setBackDice +\n    sanitizedPool.difficultyDice +\n    sanitizedPool.challengeDice +\n    sanitizedPool.forceDice;\n\n  // Check total dice limit\n  if (totalDice > maxTotalDice) {\n    throw new Error(\n      `Total dice count (${totalDice}) exceeds maximum allowed (${maxTotalDice}). ` +\n        `Please reduce the number of dice in your pool.`,\n    );\n  }\n\n  // Warn if per-type limits were exceeded (but continue with capped values)\n  if (exceedsPerTypeLimit && options?.throwOnLimitExceeded) {\n    const exceeded = [];\n    if (boostCount > maxDicePerType) exceeded.push(`boost: ${boostCount}`);\n    if (abilityCount > maxDicePerType)\n      exceeded.push(`ability: ${abilityCount}`);\n    if (proficiencyCount > maxDicePerType)\n      exceeded.push(`proficiency: ${proficiencyCount}`);\n    if (setBackCount > maxDicePerType)\n      exceeded.push(`setback: ${setBackCount}`);\n    if (difficultyCount > maxDicePerType)\n      exceeded.push(`difficulty: ${difficultyCount}`);\n    if (challengeCount > maxDicePerType)\n      exceeded.push(`challenge: ${challengeCount}`);\n    if (forceCount > maxDicePerType) exceeded.push(`force: ${forceCount}`);\n\n    throw new Error(\n      `Dice counts exceed per-type limit (${maxDicePerType}): ${exceeded.join(\", \")}. ` +\n        `Dice counts have been capped to the maximum.`,\n    );\n  }\n\n  const detailedResults: DetailedDieResult[] = [];\n\n  // Roll boost dice\n  for (let i = 0; i < sanitizedPool.boostDice; i++) {\n    const roll = rollDie(6);\n    detailedResults.push({\n      type: \"boost\",\n      roll,\n      result: boostDieResult(roll),\n    });\n  }\n\n  // Roll ability dice\n  for (let i = 0; i < sanitizedPool.abilityDice; i++) {\n    const roll = rollDie(8);\n    detailedResults.push({\n      type: \"ability\",\n      roll,\n      result: abilityDieResult(roll),\n    });\n  }\n\n  // Roll proficiency dice\n  for (let i = 0; i < sanitizedPool.proficiencyDice; i++) {\n    const roll = rollDie(12);\n    detailedResults.push({\n      type: \"proficiency\",\n      roll,\n      result: proficiencyDieResult(roll),\n    });\n  }\n\n  // Roll setback dice\n  for (let i = 0; i < sanitizedPool.setBackDice; i++) {\n    const roll = rollDie(6);\n    detailedResults.push({\n      type: \"setback\",\n      roll,\n      result: setBackDieResult(roll),\n    });\n  }\n\n  // Roll difficulty dice\n  for (let i = 0; i < sanitizedPool.difficultyDice; i++) {\n    const roll = rollDie(8);\n    detailedResults.push({\n      type: \"difficulty\",\n      roll,\n      result: difficultyDieResult(roll),\n    });\n  }\n\n  // Roll challenge dice\n  for (let i = 0; i < sanitizedPool.challengeDice; i++) {\n    const roll = rollDie(12);\n    detailedResults.push({\n      type: \"challenge\",\n      roll,\n      result: challengeDieResult(roll),\n    });\n  }\n\n  // Roll force dice\n  for (let i = 0; i < sanitizedPool.forceDice; i++) {\n    const roll = rollDie(12);\n    detailedResults.push({\n      type: \"force\",\n      roll,\n      result: forceDieResult(roll),\n    });\n  }\n\n  const automaticSymbols = {\n    successes: pool.automaticSuccesses,\n    failures: pool.automaticFailures,\n    advantages: pool.automaticAdvantages,\n    threats: pool.automaticThreats,\n    triumphs: pool.automaticTriumphs,\n    despairs: pool.automaticDespairs,\n    lightSide: pool.automaticLightSide,\n    darkSide: pool.automaticDarkSide,\n  };\n\n  const summary = sumResults(\n    detailedResults.map((r) => r.result),\n    automaticSymbols,\n    options,\n  );\n\n  if (options?.hints) {\n    const applicableHints = hints.filter((hint) => {\n      const { cost } = hint;\n      // For OR conditions: at least one option must be fully satisfied\n      // Each entry in cost represents an alternative way to pay for the hint\n      return Object.entries(cost).some(([symbol, required]) => {\n        const summaryKey = (symbol.toLowerCase() + \"s\") as keyof typeof summary;\n        const value = summary[summaryKey];\n        if (typeof value !== \"number\") return false;\n        // Check if we have enough of this symbol type to afford the hint\n        return required !== undefined && required > 0 && value >= required;\n      });\n    });\n    summary.hints = applicableHints.map(\n      (hint) => `${hintCostDisplayText(hint)} - ${hint.description}`,\n    );\n  }\n\n  return {\n    results: detailedResults,\n    summary: summary,\n  };\n};\n","import { DicePool } from \"./types\";\n\n/**\n * Options for applying talent or equipment modifiers to a dice pool\n */\nexport type PoolModifiers = {\n  automaticSuccesses?: number;\n  automaticFailures?: number;\n  automaticAdvantages?: number;\n  automaticThreats?: number;\n  automaticTriumphs?: number;\n  automaticDespairs?: number;\n  upgradeAbility?: number;\n  upgradeDifficulty?: number;\n  downgradeProficiency?: number;\n  downgradeChallenge?: number;\n};\n\n/**\n * Creates a basic skill check dice pool\n * @param ability Number of ability (green) dice\n * @param proficiency Number of proficiency (yellow) dice\n * @param modifiers Optional modifiers from talents, equipment, etc.\n * @returns DicePool configured for a basic skill check\n */\nexport const createSkillCheck = (\n  ability: number,\n  proficiency: number,\n  modifiers?: PoolModifiers,\n): DicePool => ({\n  abilityDice: Math.max(0, ability),\n  proficiencyDice: Math.max(0, proficiency),\n  ...modifiers,\n});\n\n/**\n * Creates a combat check dice pool with optional boost die\n * @param ability Number of ability (green) dice\n * @param proficiency Number of proficiency (yellow) dice\n * @param boost Number of boost (blue) dice\n * @param modifiers Optional modifiers from talents, equipment, etc.\n * @returns DicePool configured for a combat check\n */\nexport const createCombatCheck = (\n  ability: number,\n  proficiency: number,\n  boost: number = 0,\n  modifiers?: PoolModifiers,\n): DicePool => ({\n  abilityDice: Math.max(0, ability),\n  proficiencyDice: Math.max(0, proficiency),\n  boostDice: Math.max(0, boost),\n  ...modifiers,\n});\n\n/**\n * Creates an opposed check dice pool\n * @param ability Number of ability (green) dice\n * @param proficiency Number of proficiency (yellow) dice\n * @param difficulty Number of difficulty (purple) dice\n * @param challenge Number of challenge (red) dice\n * @param modifiers Optional modifiers from talents, equipment, etc.\n * @returns DicePool configured for an opposed check\n */\nexport const createOpposedCheck = (\n  ability: number,\n  proficiency: number,\n  difficulty: number,\n  challenge: number = 0,\n  modifiers?: PoolModifiers,\n): DicePool => ({\n  abilityDice: Math.max(0, ability),\n  proficiencyDice: Math.max(0, proficiency),\n  difficultyDice: Math.max(0, difficulty),\n  challengeDice: Math.max(0, challenge),\n  ...modifiers,\n});\n\n/**\n * Creates a difficulty check dice pool\n * @param difficulty Number of difficulty (purple) dice\n * @param challenge Number of challenge (red) dice\n * @param modifiers Optional modifiers from talents, equipment, etc.\n * @returns DicePool configured for a pure difficulty check\n */\nexport const createDifficultyPool = (\n  difficulty: number,\n  challenge: number = 0,\n  modifiers?: PoolModifiers,\n): DicePool => ({\n  difficultyDice: Math.max(0, difficulty),\n  challengeDice: Math.max(0, challenge),\n  ...modifiers,\n});\n\n/**\n * Applies talent modifiers to an existing dice pool\n * Common use case for talents that add automatic advantages, successes, or upgrade dice\n * @param pool The base dice pool\n * @param modifiers The modifiers to apply\n * @returns A new dice pool with modifiers applied\n */\nexport const applyTalentModifiers = (\n  pool: DicePool,\n  modifiers: PoolModifiers,\n): DicePool => ({\n  ...pool,\n  automaticSuccesses:\n    (pool.automaticSuccesses || 0) + (modifiers.automaticSuccesses || 0),\n  automaticFailures:\n    (pool.automaticFailures || 0) + (modifiers.automaticFailures || 0),\n  automaticAdvantages:\n    (pool.automaticAdvantages || 0) + (modifiers.automaticAdvantages || 0),\n  automaticThreats:\n    (pool.automaticThreats || 0) + (modifiers.automaticThreats || 0),\n  automaticTriumphs:\n    (pool.automaticTriumphs || 0) + (modifiers.automaticTriumphs || 0),\n  automaticDespairs:\n    (pool.automaticDespairs || 0) + (modifiers.automaticDespairs || 0),\n  upgradeAbility: (pool.upgradeAbility || 0) + (modifiers.upgradeAbility || 0),\n  upgradeDifficulty:\n    (pool.upgradeDifficulty || 0) + (modifiers.upgradeDifficulty || 0),\n  downgradeProficiency:\n    (pool.downgradeProficiency || 0) + (modifiers.downgradeProficiency || 0),\n  downgradeChallenge:\n    (pool.downgradeChallenge || 0) + (modifiers.downgradeChallenge || 0),\n});\n"],"names":["SYMBOLS","SUCCESS","FAILURE","ADVANTAGE","THREAT","TRIUMPH","DESPAIR","LIGHT","DARK","hints","description","cost","BOOST_DIE_FACES","successes","advantages","SETBACK_DIE_FACES","failures","threats","ABILITY_DIE_FACES","DIFFICULTY_DIE_FACES","PROFICIENCY_DIE_FACES","triumphs","CHALLENGE_DIE_FACES","despairs","FORCE_DIE_FACES","darkSide","lightSide","DICE_FACES","boost","setback","ability","difficulty","proficiency","challenge","force","rollDie","sides","Math","floor","random","boostDieResult","roll","face","despair","setBackDieResult","abilityDieResult","difficultyDieResult","proficiencyDieResult","challengeDieResult","forceDieResult","pool","options","modifiedPool","upgradeAbility","upgradesToApply","currentAbility","abilityDice","upgradedDice","min","proficiencyDice","upgradeDifficulty","currentDifficulty","difficultyDice","challengeDice","downgradeProficiency","currentProficiency","downgradesToApply","downgradeChallenge","currentChallenge","applyDiceModifications","boostCount","_a","boostDice","abilityCount","_b","proficiencyCount","_c","setBackCount","_d","setBackDice","difficultyCount","_e","challengeCount","_f","forceCount","_g","forceDice","maxDicePerType","_h","maxTotalDice","_j","sanitizedPool","max","exceedsPerTypeLimit","totalDice","Error","throwOnLimitExceeded","exceeded","push","join","detailedResults","i","type","result","automaticSymbols","automaticSuccesses","automaticFailures","automaticAdvantages","automaticThreats","automaticTriumphs","automaticDespairs","automaticLightSide","automaticDarkSide","summary","results","sums","reduce","acc","curr","netSuccesses","netFailures","netAdvantages","netThreats","sumResults","map","r","applicableHints","filter","hint","Object","entries","some","symbol","required","summaryKey","toLowerCase","value","undefined","keys","length","parts","_","count","charAt","toUpperCase","slice","hintCostDisplayText","createSkillCheck","modifiers","createCombatCheck","createOpposedCheck","createDifficultyPool","applyTalentModifiers"],"mappings":"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"}